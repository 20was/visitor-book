# Docker Compose configuration for the Visitor Book application
# This file defines how our application's different parts (services) work together

services: # List of all the services (containers) that make up our application
  # PostgreSQL Database Service
  postgres:
    image: postgres:14 # Uses PostgreSQL version 14
    environment: # Environment variables for database configuration
      POSTGRES_USER: postgres # Database username
      POSTGRES_PASSWORD: postgres # Database password
      POSTGRES_DB: visitorbook # Name of the database to create
    ports:
      - '5432:5432' # Maps container port 5432 to host port 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data # Persists database data between container restarts
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build: ./visitor-book-backend # Builds the backend from the Dockerfile in this directory
    depends_on:
      postgres:
        condition: service_healthy
    environment: # Environment variables for backend configuration
      PORT: 3001 # Port the backend will run on
      DB_HOST: postgres # Database host (matches the postgres service name)
      DB_PORT: 5432 # Database port
      DB_USER: postgres # Database username
      DB_PASSWORD: postgres # Database password
      DB_NAME: visitorbook # Database name
      NODE_ENV: development
    ports:
      - '3001:3001' # Maps container port 3001 to host port 3001
    volumes:
      - ./visitor-book-backend:/app # Mounts backend code for development
      - /app/node_modules # Preserves node_modules inside container
    command: sh -c "npm run dev"

  # Frontend Web Application Service
  frontend:
    build:
      context: ./visitor-book-frontend # Directory containing frontend code
      dockerfile: Dockerfile # Uses development-specific Dockerfile
    volumes:
      - ./visitor-book-frontend:/app # Mounts frontend code for development
      - /app/node_modules # Preserves node_modules inside container
    ports:
      - '3000:3000' # Maps container port 3000 to host port 3000
    environment:
      - CHOKIDAR_USEPOLLING=true # Enables file watching for development
      - WDS_SOCKET_PORT=0 # Configures webpack for Docker environment
    depends_on:
      - backend # Ensures backend starts before frontend

# Named volumes for data persistence
volumes:
  postgres-data: # Creates a named volume for database data
